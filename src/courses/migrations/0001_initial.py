# Generated by Django 2.2.6 on 2019-12-11 15:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('moodle_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=256)),
                ('external_id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=256)),
                ('external_id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='What is this content called?', max_length=256)),
                ('type', models.CharField(choices=[('book', 'Book'), ('chapter', 'Chapter'), ('lesson', 'Lesson'), ('url', 'Website'), ('resource', 'File'), ('folder', 'Folder'), ('page', 'Page'), ('wiki', 'Wiki')], help_text='What kind of content is this?', max_length=256)),
                ('target', models.CharField(help_text='Where can student find the content?', max_length=256)),
                ('external', models.BooleanField(default=True)),
                ('external_id', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, help_text='The course name.', max_length=50)),
                ('platform', models.CharField(choices=[('Moodle', 'Moodle'), ('Blackboard', 'Blackboard')], default='Moodle', max_length=50)),
                ('courseId', models.IntegerField(editable=False, help_text='The course ID of the course on the LMS.', unique=True, verbose_name='Course ID')),
                ('inactivity', models.BooleanField(default=False, help_text="Sends a message when a user hasn't logged in for a certain time.", verbose_name='Enable inactivity check')),
                ('deadline', models.BooleanField(default=False, help_text="Sends a message to students certain time before a deadline when they haven't submitted anything.", verbose_name='Enable deadline check')),
                ('hours_before', models.IntegerField(default=24, help_text='How many hours before the deadline needs the student to be notified?', verbose_name='Hours before early deadline warning')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('contents', models.ManyToManyField(blank=True, to='courses.Content')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=256)),
                ('external_id', models.IntegerField()),
                ('contents', models.ManyToManyField(blank=True, to='courses.Content')),
                ('course', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='courses.Course')),
                ('subjects', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Subject')),
            ],
            options={
                'verbose_name_plural': 'quizzes',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=256)),
                ('external_id', models.IntegerField()),
                ('contents', models.ManyToManyField(blank=True, to='courses.Content')),
                ('course', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='courses.Course')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.Quiz')),
                ('subjects', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Subject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['courseId'], name='courses_cou_courseI_87a520_idx'),
        ),
        migrations.AddField(
            model_name='content',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.Course'),
        ),
        migrations.AddField(
            model_name='choice',
            name='contents',
            field=models.ManyToManyField(blank=True, to='courses.Content'),
        ),
        migrations.AddField(
            model_name='choice',
            name='course',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='courses.Course'),
        ),
        migrations.AddField(
            model_name='choice',
            name='subjects',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Subject'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='contents',
            field=models.ManyToManyField(blank=True, to='courses.Content'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='course',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='courses.Course'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='subjects',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Subject'),
        ),
        migrations.AddField(
            model_name='user',
            name='courses',
            field=models.ManyToManyField(to='courses.Course'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['external_id'], name='courses_que_externa_252e2d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('course', 'external_id')},
        ),
        migrations.AddIndex(
            model_name='content',
            index=models.Index(fields=['target'], name='courses_con_target_65e715_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='content',
            unique_together={('course', 'target')},
        ),
        migrations.AddIndex(
            model_name='choice',
            index=models.Index(fields=['external_id'], name='courses_cho_externa_155387_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='choice',
            unique_together={('course', 'external_id')},
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['external_id'], name='courses_ass_externa_16a026_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assignment',
            unique_together={('course', 'external_id')},
        ),
    ]
